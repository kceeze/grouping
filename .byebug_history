exit
row[column_to_match]
prompt_id
exit
row
row[column_to_match] == prompt_id
exit
row[column_to_match] == prompt_id
row
column_to_match
colum_to_match
exit
mapping_hash[matching_type.to_sym]exi
mapping_hash[matching_type.to_sym]
matching_type.to_sym
matching_type
mapping_hash[matching_type]
mapping_hash
exit
headers[0]
headers
exit
headers
header
matching_type
exit
matching_type
row
exit
row
exit
header_id = csv_file.tr("^0-9", '').to_i
csv_file.tr("^0-9", '').to_i
csv_file.tr("^0-9", '')
csv_file..tr("^0-9", '')
csv_file..scan(/\d/).join('')
csv_file
row
exit
file
exit
people
"YO" unless create
unless create
create
exit
person.email[0]
person.email[1]
person.phone[1]
person.phone[0]
person.phone
person
phone1
exit
csv_file.split(".").firste
csv_file.split(".").first
csv_file.split(".")
csv_file.split(",")
csv_file
exit
person.email.join(",")
[""].join(", ")
[""].join(",")
[""]
person.email.join(",")
person.email.join(", ")
person.email.join(",")
person.email
person
exit
 self.headers(csv_file)
headers
csv
csv_file
exit
person.email
person
exit
person
person.email
exit
csv_file == "input1.csv"
exit
csv_file
people
exit
people.last
people
exit
people
exit
poeple
people.count
people
exit
people.count
people
peple
next
exit
next
people
people.count
next
people.count
people
exit
people.count
people
exit
csv_files.sort
csv_files
people.count
people
exit
csv_files
exit
people.map{|a| a.email_id}
people.map{|a| a.phone_id}
people.phone_Id
people
exit
people
people.select{|a| a.email_and_phone_id == ids[4]}.count
ids[4]
people.select{|a| a.email_and_phone_id == ids[3]}.count
people.select{|a| a.email_and_phone_id == ids[2]}.count
people.select{|a| a.email_and_phone_id == ids[1]}.count
people.select{|a| a.email_and_phone_id == ids[0]}.count
ids
people.select{|a| a.email_and_phone_id == ids[1]}.count
people.select{|a| a.email_and_phone_id == ids[0]}.count
ids.count
ids
people.select{|a| a.email_and_phone_id == ids[6]}.count
ids.count
people.map{|a| a.email_and_phone_id}.uniq.count
people.map{|a| a.email_and_phone_id}
people.map{|a| a.email_and_phone_id
people.select{|a| a.email_and_phone_id == ids[6]}.count
people.count
people.select{|a| a.email_and_phone_id == ids[7]}.count
people.select{|a| a.email_and_phone_id == ids[6]}.count
people.select{|a| a.email_and_phone_id == ids[5]}.count
people.select{|a| a.email_and_phone_id == ids[4]}.count
people.select{|a| a.email_and_phone_id == ids[2]}.count
people.select{|a| a.email_and_phone_id == ids[1]}.count
people.select{|a| a.email_and_phone_id == ids[0]}.count
people.select{|a| a.email_and_phone_id == ids[0]}
ids.count
ids = people.map{|a| a.email_and_phone_id}.uniq
ids.count
ids = people.map{|a| a.email_and_phone_id}
people.map{|a| a.email_and_phone_id}
people
people.first
people.count
people.map{|a| a.email_and_phone_id}.uniq.count
people.map{|a| a.email_and_phone_id}.uniq
people.map{|a| a.email_and_phone_id}
people
second_batcher
second_batche
exit
match.email_and_phone_id
match
  match = people_with_unique_identifier.find{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}
people_with_unique_identifier.find{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}
people_with_unique_identifier.select{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}
people_with_unique_identifeier.select{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}
people._with_unique_identifeier.select{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}
people._with_unique_identifier
self
 people_with_unique_identifier
people_with_unique_identifier.empty
self
exit
people.select{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}
people.select{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}.count
people.select{|a| a.email_id == self.email_id || a.phone_id == self.phone_id}
people.select{|a| a.email_id == self.email_id}
people.select{|a| a.email_id}
self.email_id
people.map{|a| a.email_id}
people.map{|a| a.email_id}.include? 
people.map{|a| a.email_id}
people
exit
person
people
people.map{|a| a.email_id}
people
people.map{|a| a.email}
people
exit
people
exit
people
exit
people.map{|a| a.email_id}
people
exit
people
people/map{|a| a.email_id}
people
people.map{|a| a.email_id}
self.email_id
self.email
self
person
people
exit
people.map{|a| a.phone_id}.uniq.count
people.map{|a| a.phone_id}.uniq.coun
people.map{|a| a.phone_id}.uniq
people.map{|a| a.phone_id}.count
people.map{|a| a.phone_id}
people.map{
people
p
exit
people.map{|a| a.phone}
people
exit
digits[0..9]
digits
exit
people[2]
people[1]
people.first
people.last
people
exit
digits
  digits = digits[1..] if digits.length == 11 && digits.start_with?('1')
digits
  digits = digits[1..] if digits.length == 11 && digits.start_with?('1')
  "(#{digits[0..2]}) #{digits[3..5]}-#{digits[6..9]}
  digits = number.gsub(/\D/, '')
number = phone.first
 digits = phone.first.gsub(/\D/, '')
 digits = phone.gsub(/\D/, '')
phone
exit
phone
exit
people.map{|a| a.email_id}.count
people.map{|a| a.email_id}.uniq.count
people.map{|a| a.email_id}.uniq
people.map{|a| a.email_id}
exit
match
        people_with_unique_identifier = people.select { |a| a.send("#{field_name}_id") }
 match = people_with_unique_identifier.find { |a| self.send(field_name).intersection(a.send(field_name)).any? }
self.email
exit
